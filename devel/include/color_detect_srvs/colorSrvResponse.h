// Generated by gencpp from file color_detect_srvs/colorSrvResponse.msg
// DO NOT EDIT!


#ifndef COLOR_DETECT_SRVS_MESSAGE_COLORSRVRESPONSE_H
#define COLOR_DETECT_SRVS_MESSAGE_COLORSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace color_detect_srvs
{
template <class ContainerAllocator>
struct colorSrvResponse_
{
  typedef colorSrvResponse_<ContainerAllocator> Type;

  colorSrvResponse_()
    : color_srv(0)
    , distance_srv(0)
    , x_diff_srv(0)  {
    }
  colorSrvResponse_(const ContainerAllocator& _alloc)
    : color_srv(0)
    , distance_srv(0)
    , x_diff_srv(0)  {
  (void)_alloc;
    }



   typedef int16_t _color_srv_type;
  _color_srv_type color_srv;

   typedef int16_t _distance_srv_type;
  _distance_srv_type distance_srv;

   typedef int16_t _x_diff_srv_type;
  _x_diff_srv_type x_diff_srv;





  typedef boost::shared_ptr< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct colorSrvResponse_

typedef ::color_detect_srvs::colorSrvResponse_<std::allocator<void> > colorSrvResponse;

typedef boost::shared_ptr< ::color_detect_srvs::colorSrvResponse > colorSrvResponsePtr;
typedef boost::shared_ptr< ::color_detect_srvs::colorSrvResponse const> colorSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator1> & lhs, const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.color_srv == rhs.color_srv &&
    lhs.distance_srv == rhs.distance_srv &&
    lhs.x_diff_srv == rhs.x_diff_srv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator1> & lhs, const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace color_detect_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ec7f7dd4aedad819684d04cf6c021e7";
  }

  static const char* value(const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ec7f7dd4aedad81ULL;
  static const uint64_t static_value2 = 0x9684d04cf6c021e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "color_detect_srvs/colorSrvResponse";
  }

  static const char* value(const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int16 color_srv\n"
"int16 distance_srv\n"
"int16 x_diff_srv\n"
"\n"
;
  }

  static const char* value(const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color_srv);
      stream.next(m.distance_srv);
      stream.next(m.x_diff_srv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct colorSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::color_detect_srvs::colorSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::color_detect_srvs::colorSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "color_srv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.color_srv);
    s << indent << "distance_srv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.distance_srv);
    s << indent << "x_diff_srv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_diff_srv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLOR_DETECT_SRVS_MESSAGE_COLORSRVRESPONSE_H
