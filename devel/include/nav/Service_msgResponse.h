// Generated by gencpp from file nav/Service_msgResponse.msg
// DO NOT EDIT!


#ifndef NAV_MESSAGE_SERVICE_MSGRESPONSE_H
#define NAV_MESSAGE_SERVICE_MSGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav
{
template <class ContainerAllocator>
struct Service_msgResponse_
{
  typedef Service_msgResponse_<ContainerAllocator> Type;

  Service_msgResponse_()
    : receive_data(false)  {
    }
  Service_msgResponse_(const ContainerAllocator& _alloc)
    : receive_data(false)  {
  (void)_alloc;
    }



   typedef uint8_t _receive_data_type;
  _receive_data_type receive_data;





  typedef boost::shared_ptr< ::nav::Service_msgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav::Service_msgResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Service_msgResponse_

typedef ::nav::Service_msgResponse_<std::allocator<void> > Service_msgResponse;

typedef boost::shared_ptr< ::nav::Service_msgResponse > Service_msgResponsePtr;
typedef boost::shared_ptr< ::nav::Service_msgResponse const> Service_msgResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav::Service_msgResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav::Service_msgResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav::Service_msgResponse_<ContainerAllocator1> & lhs, const ::nav::Service_msgResponse_<ContainerAllocator2> & rhs)
{
  return lhs.receive_data == rhs.receive_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav::Service_msgResponse_<ContainerAllocator1> & lhs, const ::nav::Service_msgResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav::Service_msgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav::Service_msgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav::Service_msgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav::Service_msgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav::Service_msgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav::Service_msgResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav::Service_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27168afa375534d85a68932f3fe53718";
  }

  static const char* value(const ::nav::Service_msgResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27168afa375534d8ULL;
  static const uint64_t static_value2 = 0x5a68932f3fe53718ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav::Service_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav/Service_msgResponse";
  }

  static const char* value(const ::nav::Service_msgResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav::Service_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool receive_data\n"
"\n"
;
  }

  static const char* value(const ::nav::Service_msgResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav::Service_msgResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.receive_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Service_msgResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav::Service_msgResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav::Service_msgResponse_<ContainerAllocator>& v)
  {
    s << indent << "receive_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.receive_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_MESSAGE_SERVICE_MSGRESPONSE_H
