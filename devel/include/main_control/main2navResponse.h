// Generated by gencpp from file main_control/main2navResponse.msg
// DO NOT EDIT!


#ifndef MAIN_CONTROL_MESSAGE_MAIN2NAVRESPONSE_H
#define MAIN_CONTROL_MESSAGE_MAIN2NAVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_control
{
template <class ContainerAllocator>
struct main2navResponse_
{
  typedef main2navResponse_<ContainerAllocator> Type;

  main2navResponse_()
    : done_flag(false)  {
    }
  main2navResponse_(const ContainerAllocator& _alloc)
    : done_flag(false)  {
  (void)_alloc;
    }



   typedef uint8_t _done_flag_type;
  _done_flag_type done_flag;





  typedef boost::shared_ptr< ::main_control::main2navResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_control::main2navResponse_<ContainerAllocator> const> ConstPtr;

}; // struct main2navResponse_

typedef ::main_control::main2navResponse_<std::allocator<void> > main2navResponse;

typedef boost::shared_ptr< ::main_control::main2navResponse > main2navResponsePtr;
typedef boost::shared_ptr< ::main_control::main2navResponse const> main2navResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_control::main2navResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_control::main2navResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main_control::main2navResponse_<ContainerAllocator1> & lhs, const ::main_control::main2navResponse_<ContainerAllocator2> & rhs)
{
  return lhs.done_flag == rhs.done_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main_control::main2navResponse_<ContainerAllocator1> & lhs, const ::main_control::main2navResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::main_control::main2navResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_control::main2navResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_control::main2navResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_control::main2navResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_control::main2navResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_control::main2navResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_control::main2navResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02525f6b4e1610a0b6835d9d8e696b93";
  }

  static const char* value(const ::main_control::main2navResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02525f6b4e1610a0ULL;
  static const uint64_t static_value2 = 0xb6835d9d8e696b93ULL;
};

template<class ContainerAllocator>
struct DataType< ::main_control::main2navResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_control/main2navResponse";
  }

  static const char* value(const ::main_control::main2navResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_control::main2navResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool done_flag\n"
;
  }

  static const char* value(const ::main_control::main2navResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_control::main2navResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.done_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct main2navResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_control::main2navResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_control::main2navResponse_<ContainerAllocator>& v)
  {
    s << indent << "done_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_CONTROL_MESSAGE_MAIN2NAVRESPONSE_H
